CREATE OR REPLACE FUNCTION update_id_seq() RETURNS VOID AS $$
DECLARE
	
BEGIN
	
      INSERT INTO id_seq VALUES ('ACCESS_POINT_ID_SEQ', 1) ON CONFLICT (name) DO UPDATE SET val = (SELECT CASE WHEN tab_id_seq.next_val IS NULL THEN 1 ELSE tab_id_seq.next_val END FROM (SELECT MAX(id_access_point) + 1 AS next_val FROM access_point) AS tab_id_seq);
      INSERT INTO id_seq VALUES ('ACTION_ID', 1) ON CONFLICT (name) DO UPDATE SET val = (SELECT CASE WHEN tab_id_seq.next_val IS NULL THEN 1 ELSE tab_id_seq.next_val END FROM (SELECT MAX(id_event_listener_action) + 1 AS next_val FROM event_listener_action) AS tab_id_seq);
      INSERT INTO id_seq VALUES ('AGENT_ID', 1) ON CONFLICT (name) DO UPDATE SET val = (SELECT CASE WHEN tab_id_seq.next_val IS NULL THEN 1 ELSE tab_id_seq.next_val END FROM (SELECT MAX(id_ne_agent) + 1 AS next_val FROM ne_agent) AS tab_id_seq);
      INSERT INTO id_seq VALUES ('AGENT_IDENTIFICATION_ID', 1) ON CONFLICT (name) DO UPDATE SET val = (SELECT CASE WHEN tab_id_seq.next_val IS NULL THEN 1 ELSE tab_id_seq.next_val END FROM (SELECT MAX(id_agent_type) + 1 AS next_val FROM ne_agent_type) AS tab_id_seq);
      INSERT INTO id_seq VALUES ('AGENT_LINK_ID', 1) ON CONFLICT (name) DO UPDATE SET val = (SELECT CASE WHEN tab_id_seq.next_val IS NULL THEN 1 ELSE tab_id_seq.next_val END FROM (SELECT MAX(id_agent_link) + 1 AS next_val FROM agent_link) AS tab_id_seq);
      INSERT INTO id_seq VALUES ('AGENT_NOTIFICATION_ID_SEQ', 1) ON CONFLICT (name) DO UPDATE SET val = (SELECT CASE WHEN tab_id_seq.next_val IS NULL THEN 1 ELSE tab_id_seq.next_val END FROM (SELECT MAX(id_agent_notification) + 1 AS next_val FROM agent_notification) AS tab_id_seq);
      INSERT INTO id_seq VALUES ('ALARM_VIEW_ID', 1) ON CONFLICT (name) DO UPDATE SET val = (SELECT CASE WHEN tab_id_seq.next_val IS NULL THEN 1 ELSE tab_id_seq.next_val END FROM (SELECT MAX(id_alarm_view) + 1 AS next_val FROM alarm_view) AS tab_id_seq);
      INSERT INTO id_seq VALUES ('BACKUP_ID', 1) ON CONFLICT (name) DO UPDATE SET val = (SELECT CASE WHEN tab_id_seq.next_val IS NULL THEN 1 ELSE tab_id_seq.next_val END FROM (SELECT MAX(id_equipment_backup) + 1 AS next_val FROM equipment_backup) AS tab_id_seq);
      INSERT INTO id_seq VALUES ('CATEGORY_TEST_ID', 1) ON CONFLICT (name) DO UPDATE SET val = (SELECT CASE WHEN tab_id_seq.next_val IS NULL THEN 1 ELSE tab_id_seq.next_val END FROM (SELECT MAX(id_category_test) + 1 AS next_val FROM category_test) AS tab_id_seq);
      INSERT INTO id_seq VALUES ('CHANNEL_ID', 1) ON CONFLICT (name) DO UPDATE SET val = (SELECT CASE WHEN tab_id_seq.next_val IS NULL THEN 1 ELSE tab_id_seq.next_val END FROM (SELECT MAX(id_virtual_channel) + 1 AS next_val FROM virtual_channel) AS tab_id_seq);
      INSERT INTO id_seq VALUES ('CLIENT_ID', 1) ON CONFLICT (name) DO UPDATE SET val = (SELECT CASE WHEN tab_id_seq.next_val IS NULL THEN 1 ELSE tab_id_seq.next_val END FROM (SELECT MAX(id_client) + 1 AS next_val FROM client) AS tab_id_seq);
      INSERT INTO id_seq VALUES ('COMPONENT_ALARM_ID', 1) ON CONFLICT (name) DO UPDATE SET val = (SELECT CASE WHEN tab_id_seq.next_val IS NULL THEN 1 ELSE tab_id_seq.next_val END FROM (SELECT MAX(id_component_alarm) + 1 AS next_val FROM component_alarm) AS tab_id_seq);
      INSERT INTO id_seq VALUES ('COMPONENT_ALARM_TEMPLATE_ID', 1) ON CONFLICT (name) DO UPDATE SET val = (SELECT CASE WHEN tab_id_seq.next_val IS NULL THEN 1 ELSE tab_id_seq.next_val END FROM (SELECT MAX(id_component_alarm_template) + 1 AS next_val FROM component_alarm_template) AS tab_id_seq);
      INSERT INTO id_seq VALUES ('COMPONENT_TEMPLATE_ID', 1) ON CONFLICT (name) DO UPDATE SET val = (SELECT CASE WHEN tab_id_seq.next_val IS NULL THEN 1 ELSE tab_id_seq.next_val END FROM (SELECT MAX(id_component_template) + 1 AS next_val FROM component_template) AS tab_id_seq);
      INSERT INTO id_seq VALUES ('CONSCIUS_PARAMETER_ID', 1) ON CONFLICT (name) DO UPDATE SET val = (SELECT CASE WHEN tab_id_seq.next_val IS NULL THEN 1 ELSE tab_id_seq.next_val END FROM (SELECT MAX(id_parameter) + 1 AS next_val FROM conscius_parameter) AS tab_id_seq);
      INSERT INTO id_seq VALUES ('CUSTM_VIEW_ID', 1) ON CONFLICT (name) DO UPDATE SET val = (SELECT CASE WHEN tab_id_seq.next_val IS NULL THEN 1 ELSE tab_id_seq.next_val END FROM (SELECT MAX(id_custom_view) + 1 AS next_val FROM custom_view) AS tab_id_seq);
      INSERT INTO id_seq VALUES ('CUSTOMER_ID', 1) ON CONFLICT (name) DO UPDATE SET val = (SELECT CASE WHEN tab_id_seq.next_val IS NULL THEN 1 ELSE tab_id_seq.next_val END FROM (SELECT MAX(id_customer) + 1 AS next_val FROM customer) AS tab_id_seq);
      INSERT INTO id_seq VALUES ('DATA_MONITOR_ID', 1) ON CONFLICT (name) DO UPDATE SET val = (SELECT CASE WHEN tab_id_seq.next_val IS NULL THEN 1 ELSE tab_id_seq.next_val END FROM (SELECT MAX(id_data_monitor) + 1 AS next_val FROM data_monitor) AS tab_id_seq);
      INSERT INTO id_seq VALUES ('DATA_UNIT_TEMPLATE_ID', 1) ON CONFLICT (name) DO UPDATE SET val = (SELECT CASE WHEN tab_id_seq.next_val IS NULL THEN 1 ELSE tab_id_seq.next_val END FROM (SELECT MAX(id_data_unit_template) + 1 AS next_val FROM data_unit_template) AS tab_id_seq);
      INSERT INTO id_seq VALUES ('EQUIPMENT_BACKUP_SCHEDULE_ID', 1) ON CONFLICT (name) DO UPDATE SET val = (SELECT CASE WHEN tab_id_seq.next_val IS NULL THEN 1 ELSE tab_id_seq.next_val END FROM (SELECT MAX(id_equipment_backup_schedule) + 1 AS next_val FROM equipment_backup_schedule) AS tab_id_seq);
      INSERT INTO id_seq VALUES ('EQUIPMENT_POLLING_DEMAND_ID', 1) ON CONFLICT (name) DO UPDATE SET val = (SELECT CASE WHEN tab_id_seq.next_val IS NULL THEN 1 ELSE tab_id_seq.next_val END FROM (SELECT MAX(id_equipment_polling_demand) + 1 AS next_val FROM equipment_polling_demand) AS tab_id_seq);
      INSERT INTO id_seq VALUES ('EQUIPMENT_POLLING_DEMAND_VAR_ID', 1) ON CONFLICT (name) DO UPDATE SET val = (SELECT CASE WHEN tab_id_seq.next_val IS NULL THEN 1 ELSE tab_id_seq.next_val END FROM (SELECT MAX(id_equipment_polling_demand_var) + 1 AS next_val FROM equipment_polling_demand_var) AS tab_id_seq);
      INSERT INTO id_seq VALUES ('EQUIPMENT_TEST_ID', 1) ON CONFLICT (name) DO UPDATE SET val = (SELECT CASE WHEN tab_id_seq.next_val IS NULL THEN 1 ELSE tab_id_seq.next_val END FROM (SELECT MAX(id_equipment_test) + 1 AS next_val FROM equipment_test) AS tab_id_seq);
      INSERT INTO id_seq VALUES ('EQUIPMENT_TEST_TEMPLATE_ID', 1) ON CONFLICT (name) DO UPDATE SET val = (SELECT CASE WHEN tab_id_seq.next_val IS NULL THEN 1 ELSE tab_id_seq.next_val END FROM (SELECT MAX(id_equipment_test_template) + 1 AS next_val FROM equipment_test_template) AS tab_id_seq);
      INSERT INTO id_seq VALUES ('EVENT_LISTENER_ID', 1) ON CONFLICT (name) DO UPDATE SET val = (SELECT CASE WHEN tab_id_seq.next_val IS NULL THEN 1 ELSE tab_id_seq.next_val END FROM (SELECT MAX(id_event_listener) + 1 AS next_val FROM event_listener) AS tab_id_seq);
      INSERT INTO id_seq VALUES ('EVENT_LISTENER_PROPERTY_ID', 1) ON CONFLICT (name) DO UPDATE SET val = (SELECT CASE WHEN tab_id_seq.next_val IS NULL THEN 1 ELSE tab_id_seq.next_val END FROM (SELECT MAX(id_event_listener_property) + 1 AS next_val FROM event_listener_property) AS tab_id_seq);
      INSERT INTO id_seq VALUES ('EVENT_LISTENER_TEMPLATE_ID', 1) ON CONFLICT (name) DO UPDATE SET val = (SELECT CASE WHEN tab_id_seq.next_val IS NULL THEN 1 ELSE tab_id_seq.next_val END FROM (SELECT MAX(id_event_listener_template) + 1 AS next_val FROM event_listener_template) AS tab_id_seq);
      INSERT INTO id_seq VALUES ('ID_RULE_ID', 1) ON CONFLICT (name) DO UPDATE SET val = (SELECT CASE WHEN tab_id_seq.next_val IS NULL THEN 1 ELSE tab_id_seq.next_val END FROM (SELECT MAX(id_identification_rule) + 1 AS next_val FROM identification_rule) AS tab_id_seq);
      INSERT INTO id_seq VALUES ('INTERFACE_INVENTORY_ID', 1) ON CONFLICT (name) DO UPDATE SET val = (SELECT CASE WHEN tab_id_seq.next_val IS NULL THEN 1 ELSE tab_id_seq.next_val END FROM (SELECT MAX(id_interface_inventory) + 1 AS next_val FROM interface_inventory) AS tab_id_seq);
      INSERT INTO id_seq VALUES ('INTERFACE_INVENTORY_TEMPLATE_ID', 1) ON CONFLICT (name) DO UPDATE SET val = (SELECT CASE WHEN tab_id_seq.next_val IS NULL THEN 1 ELSE tab_id_seq.next_val END FROM (SELECT MAX(id_interface_inventory_template) + 1 AS next_val FROM interface_inventory_template) AS tab_id_seq);
      INSERT INTO id_seq VALUES ('INVENTORY_ID', 1) ON CONFLICT (name) DO UPDATE SET val = (SELECT CASE WHEN tab_id_seq.next_val IS NULL THEN 1 ELSE tab_id_seq.next_val END FROM (SELECT MAX(id_inventory) + 1 AS next_val FROM inventory) AS tab_id_seq);
      INSERT INTO id_seq VALUES ('INVENTORY_TEMPLATE_ID', 1) ON CONFLICT (name) DO UPDATE SET val = (SELECT CASE WHEN tab_id_seq.next_val IS NULL THEN 1 ELSE tab_id_seq.next_val END FROM (SELECT MAX(id_inventory_template) + 1 AS next_val FROM inventory_template) AS tab_id_seq);
      INSERT INTO id_seq VALUES ('LINK_ID', 1) ON CONFLICT (name) DO UPDATE SET val = (SELECT CASE WHEN tab_id_seq.next_val IS NULL THEN 1 ELSE tab_id_seq.next_val END FROM (SELECT MAX(id_agent_link) + 1 AS next_val FROM agent_link) AS tab_id_seq);
      INSERT INTO id_seq VALUES ('LINK_INVENTORY_ID', 1) ON CONFLICT (name) DO UPDATE SET val = (SELECT CASE WHEN tab_id_seq.next_val IS NULL THEN 1 ELSE tab_id_seq.next_val END FROM (SELECT MAX(id_link_inventory) + 1 AS next_val FROM link_inventory) AS tab_id_seq);
      INSERT INTO id_seq VALUES ('LINK_INVENTORY_TEMPLATE_ID', 1) ON CONFLICT (name) DO UPDATE SET val = (SELECT CASE WHEN tab_id_seq.next_val IS NULL THEN 1 ELSE tab_id_seq.next_val END FROM (SELECT MAX(id_link_inventory_template) + 1 AS next_val FROM link_inventory_template) AS tab_id_seq);
      INSERT INTO id_seq VALUES ('MAP_ID', 1) ON CONFLICT (name) DO UPDATE SET val = (SELECT CASE WHEN tab_id_seq.next_val IS NULL THEN 1 ELSE tab_id_seq.next_val END FROM (SELECT MAX(id_map_view) + 1 AS next_val FROM map_view) AS tab_id_seq);
      INSERT INTO id_seq VALUES ('MONITOR_PROCESS_ID', 1) ON CONFLICT (name) DO UPDATE SET val = (SELECT CASE WHEN tab_id_seq.next_val IS NULL THEN 1 ELSE tab_id_seq.next_val END FROM (SELECT MAX(id_monitor_process) + 1 AS next_val FROM monitor_process) AS tab_id_seq);
      INSERT INTO id_seq VALUES ('MONITOR_PROCESS_PROPERTY_ID', 1) ON CONFLICT (name) DO UPDATE SET val = (SELECT CASE WHEN tab_id_seq.next_val IS NULL THEN 1 ELSE tab_id_seq.next_val END FROM (SELECT MAX(id_monitor_process_property) + 1 AS next_val FROM monitor_process_property) AS tab_id_seq);
      INSERT INTO id_seq VALUES ('NETWORK_SYMBOL_ID', 1) ON CONFLICT (name) DO UPDATE SET val = (SELECT CASE WHEN tab_id_seq.next_val IS NULL THEN 1 ELSE tab_id_seq.next_val END FROM (SELECT MAX(id_network_symbol) + 1 AS next_val FROM network_symbol) AS tab_id_seq);
      INSERT INTO id_seq VALUES ('NODE_DATA_ID', 1) ON CONFLICT (name) DO UPDATE SET val = (SELECT CASE WHEN tab_id_seq.next_val IS NULL THEN 1 ELSE tab_id_seq.next_val END FROM (SELECT MAX(id_node_data) + 1 AS next_val FROM node_data) AS tab_id_seq);
      INSERT INTO id_seq VALUES ('NODE_DATA_TEMPLATE_ID', 1) ON CONFLICT (name) DO UPDATE SET val = (SELECT CASE WHEN tab_id_seq.next_val IS NULL THEN 1 ELSE tab_id_seq.next_val END FROM (SELECT MAX(id_node_data_template) + 1 AS next_val FROM node_data_template) AS tab_id_seq);
      INSERT INTO id_seq VALUES ('NODE_DATA_UNIT_HISTORY_ID', 1) ON CONFLICT (name) DO UPDATE SET val = (SELECT CASE WHEN tab_id_seq.next_val IS NULL THEN 1 ELSE tab_id_seq.next_val END FROM (SELECT MAX(id_data_unit_history) + 1 AS next_val FROM data_unit_history) AS tab_id_seq);
      INSERT INTO id_seq VALUES ('NODE_DATA_UNIT_ID', 1) ON CONFLICT (name) DO UPDATE SET val = (SELECT CASE WHEN tab_id_seq.next_val IS NULL THEN 1 ELSE tab_id_seq.next_val END FROM (SELECT MAX(id_data_unit) + 1 AS next_val FROM data_unit) AS tab_id_seq);
      INSERT INTO id_seq VALUES ('NODE_GROUP_VIEW_ID', 1) ON CONFLICT (name) DO UPDATE SET val = (SELECT CASE WHEN tab_id_seq.next_val IS NULL THEN 1 ELSE tab_id_seq.next_val END FROM (SELECT MAX(id_node_group_view) + 1 AS next_val FROM node_group_view) AS tab_id_seq);
      INSERT INTO id_seq VALUES ('NODE_ID', 1) ON CONFLICT (name) DO UPDATE SET val = (SELECT CASE WHEN tab_id_seq.next_val IS NULL THEN 1 ELSE tab_id_seq.next_val END FROM (SELECT MAX(id_ne_component) + 1 AS next_val FROM ne_component) AS tab_id_seq);
      INSERT INTO id_seq VALUES ('NODE_NOTIFICATION_ID', 1) ON CONFLICT (name) DO UPDATE SET val = (SELECT CASE WHEN tab_id_seq.next_val IS NULL THEN 1 ELSE tab_id_seq.next_val END FROM (SELECT MAX(id_node_notification) + 1 AS next_val FROM node_notification) AS tab_id_seq);
      INSERT INTO id_seq VALUES ('NODE_NOTIFICATION_PROPERTY_ID', 1) ON CONFLICT (name) DO UPDATE SET val = (SELECT CASE WHEN tab_id_seq.next_val IS NULL THEN 1 ELSE tab_id_seq.next_val END FROM (SELECT MAX(id_node_notification_property) + 1 AS next_val FROM node_notification_property) AS tab_id_seq);
      INSERT INTO id_seq VALUES ('OLT_BUNDLE_LOCAL_ID', 1) ON CONFLICT (name) DO UPDATE SET val = (SELECT CASE WHEN tab_id_seq.next_val IS NULL THEN 1 ELSE tab_id_seq.next_val END FROM (SELECT MAX(id_olt_bundle_local) + 1 AS next_val FROM olt_bundle_local) AS tab_id_seq);
      INSERT INTO id_seq VALUES ('OLT_DELIVERING_LOG_ID', 1) ON CONFLICT (name) DO UPDATE SET val = (SELECT CASE WHEN tab_id_seq.next_val IS NULL THEN 1 ELSE tab_id_seq.next_val END FROM (SELECT MAX(id_olt_delivering_log) + 1 AS next_val FROM olt_delivering_log) AS tab_id_seq);
      INSERT INTO id_seq VALUES ('OLT_INTERFACE_ID', 1) ON CONFLICT (name) DO UPDATE SET val = (SELECT CASE WHEN tab_id_seq.next_val IS NULL THEN 1 ELSE tab_id_seq.next_val END FROM (SELECT MAX(id_olt_interface) + 1 AS next_val FROM olt_interface) AS tab_id_seq);
      INSERT INTO id_seq VALUES ('OLT_INTERFACE_MODE_CONFIGURATION_ID', 1) ON CONFLICT (name) DO UPDATE SET val = (SELECT CASE WHEN tab_id_seq.next_val IS NULL THEN 1 ELSE tab_id_seq.next_val END FROM (SELECT MAX(id_olt_interface_mode_configuration) + 1 AS next_val FROM olt_interface_mode_configuration) AS tab_id_seq);
      INSERT INTO id_seq VALUES ('OLT_INTERFACE_RULE_ID', 1) ON CONFLICT (name) DO UPDATE SET val = (SELECT CASE WHEN tab_id_seq.next_val IS NULL THEN 1 ELSE tab_id_seq.next_val END FROM (SELECT MAX(id_olt_interface_rule) + 1 AS next_val FROM olt_interface_rule) AS tab_id_seq);
      INSERT INTO id_seq VALUES ('OLT_PROFILE_ID', 1) ON CONFLICT (name) DO UPDATE SET val = (SELECT CASE WHEN tab_id_seq.next_val IS NULL THEN 1 ELSE tab_id_seq.next_val END FROM (SELECT MAX(id_olt_profile) + 1 AS next_val FROM olt_profile) AS tab_id_seq);
      INSERT INTO id_seq VALUES ('OLT_PROFILE_INTERFACE_ID', 1) ON CONFLICT (name) DO UPDATE SET val = (SELECT CASE WHEN tab_id_seq.next_val IS NULL THEN 1 ELSE tab_id_seq.next_val END FROM (SELECT MAX(id_olt_profile_interface) + 1 AS next_val FROM olt_profile_interface) AS tab_id_seq);
      INSERT INTO id_seq VALUES ('OLT_PROFILE_LOCAL_ID', 1) ON CONFLICT (name) DO UPDATE SET val = (SELECT CASE WHEN tab_id_seq.next_val IS NULL THEN 1 ELSE tab_id_seq.next_val END FROM (SELECT MAX(id_olt_profile_local) + 1 AS next_val FROM olt_profile_local) AS tab_id_seq);
      INSERT INTO id_seq VALUES ('OLT_SERVICE_ID', 1) ON CONFLICT (name) DO UPDATE SET val = (SELECT CASE WHEN tab_id_seq.next_val IS NULL THEN 1 ELSE tab_id_seq.next_val END FROM (SELECT MAX(id_olt_service) + 1 AS next_val FROM olt_service) AS tab_id_seq);
      INSERT INTO id_seq VALUES ('OLT_TRIBUTARY_ID', 1) ON CONFLICT (name) DO UPDATE SET val = (SELECT CASE WHEN tab_id_seq.next_val IS NULL THEN 1 ELSE tab_id_seq.next_val END FROM (SELECT MAX(id_olt_tributary) + 1 AS next_val FROM olt_tributary) AS tab_id_seq);
      INSERT INTO id_seq VALUES ('OLT_VLAN_ID', 1) ON CONFLICT (name) DO UPDATE SET val = (SELECT CASE WHEN tab_id_seq.next_val IS NULL THEN 1 ELSE tab_id_seq.next_val END FROM (SELECT MAX(id_olt_vlan) + 1 AS next_val FROM olt_vlan) AS tab_id_seq);
      INSERT INTO id_seq VALUES ('PHYSICAL_INVENTORY_ID', 1) ON CONFLICT (name) DO UPDATE SET val = (SELECT CASE WHEN tab_id_seq.next_val IS NULL THEN 1 ELSE tab_id_seq.next_val END FROM (SELECT MAX(id_physical_inventory) + 1 AS next_val FROM physical_inventory) AS tab_id_seq);
      INSERT INTO id_seq VALUES ('PHYSICAL_INVENTORY_TEMPLATE_ID', 1) ON CONFLICT (name) DO UPDATE SET val = (SELECT CASE WHEN tab_id_seq.next_val IS NULL THEN 1 ELSE tab_id_seq.next_val END FROM (SELECT MAX(id_physical_inventory_template) + 1 AS next_val FROM physical_inventory_template) AS tab_id_seq);
      INSERT INTO id_seq VALUES ('PROBE_ID', 1) ON CONFLICT (name) DO UPDATE SET val = (SELECT CASE WHEN tab_id_seq.next_val IS NULL THEN 1 ELSE tab_id_seq.next_val END FROM (SELECT MAX(id_probe) + 1 AS next_val FROM probe) AS tab_id_seq);
      INSERT INTO id_seq VALUES ('PROFILE_ID', 1) ON CONFLICT (name) DO UPDATE SET val = (SELECT CASE WHEN tab_id_seq.next_val IS NULL THEN 1 ELSE tab_id_seq.next_val END FROM (SELECT MAX(id_profile) + 1 AS next_val FROM sys_profile) AS tab_id_seq);
      INSERT INTO id_seq VALUES ('ROUTING_PROPERTY_ID', 1) ON CONFLICT (name) DO UPDATE SET val = (SELECT CASE WHEN tab_id_seq.next_val IS NULL THEN 1 ELSE tab_id_seq.next_val END FROM (SELECT MAX(id_routing_property) + 1 AS next_val FROM routing_property) AS tab_id_seq);
      INSERT INTO id_seq VALUES ('SLOT_CONFIG_TEMPLATE_ID', 1) ON CONFLICT (name) DO UPDATE SET val = (SELECT CASE WHEN tab_id_seq.next_val IS NULL THEN 1 ELSE tab_id_seq.next_val END FROM (SELECT MAX(id_slot_config_template) + 1 AS next_val FROM slot_config_template) AS tab_id_seq);
      INSERT INTO id_seq VALUES ('SLOT_TYPE_TEMPLATE_ID', 1) ON CONFLICT (name) DO UPDATE SET val = (SELECT CASE WHEN tab_id_seq.next_val IS NULL THEN 1 ELSE tab_id_seq.next_val END FROM (SELECT MAX(id_slot_type_template) + 1 AS next_val FROM slot_type_template) AS tab_id_seq);
      INSERT INTO id_seq VALUES ('SUBMODULE_CONFIG_TEMPLATE_ID', 1) ON CONFLICT (name) DO UPDATE SET val = (SELECT CASE WHEN tab_id_seq.next_val IS NULL THEN 1 ELSE tab_id_seq.next_val END FROM (SELECT MAX(id_submodule_config_template) + 1 AS next_val FROM submodule_config_template) AS tab_id_seq);
      INSERT INTO id_seq VALUES ('SUBMODULE_SLOT_ID', 1) ON CONFLICT (name) DO UPDATE SET val = (SELECT CASE WHEN tab_id_seq.next_val IS NULL THEN 1 ELSE tab_id_seq.next_val END FROM (SELECT MAX(id_submodule_slot) + 1 AS next_val FROM submodule_slot) AS tab_id_seq);
      INSERT INTO id_seq VALUES ('SYMBOL_ID', 1) ON CONFLICT (name) DO UPDATE SET val = (SELECT CASE WHEN tab_id_seq.next_val IS NULL THEN 1 ELSE tab_id_seq.next_val END FROM (SELECT MAX(id_symbol) + 1 AS next_val FROM symbol) AS tab_id_seq);
      INSERT INTO id_seq VALUES ('SYNC_ENGINE_CONFIG_ID', 1) ON CONFLICT (name) DO UPDATE SET val = (SELECT CASE WHEN tab_id_seq.next_val IS NULL THEN 1 ELSE tab_id_seq.next_val END FROM (SELECT MAX(id_sync_config) + 1 AS next_val FROM sync_config) AS tab_id_seq);
      INSERT INTO id_seq VALUES ('SYNC_ENGINE_CONFIG_TEMP_ID', 1) ON CONFLICT (name) DO UPDATE SET val = (SELECT CASE WHEN tab_id_seq.next_val IS NULL THEN 1 ELSE tab_id_seq.next_val END FROM (SELECT MAX(id_sync_config_template) + 1 AS next_val FROM sync_config_template) AS tab_id_seq);
      INSERT INTO id_seq VALUES ('SYSTEM_NOTIFICATION_ID', 1) ON CONFLICT (name) DO UPDATE SET val = (SELECT CASE WHEN tab_id_seq.next_val IS NULL THEN 1 ELSE tab_id_seq.next_val END FROM (SELECT MAX(id_system_notification) + 1 AS next_val FROM system_notification) AS tab_id_seq);
      INSERT INTO id_seq VALUES ('TABLE_POLICY_ID', 1) ON CONFLICT (name) DO UPDATE SET val = (SELECT CASE WHEN tab_id_seq.next_val IS NULL THEN 1 ELSE tab_id_seq.next_val END FROM (SELECT MAX(id_table_policy) + 1 AS next_val FROM table_policy) AS tab_id_seq);
      INSERT INTO id_seq VALUES ('TRAP_ACTION_ID', 1) ON CONFLICT (name) DO UPDATE SET val = (SELECT CASE WHEN tab_id_seq.next_val IS NULL THEN 1 ELSE tab_id_seq.next_val END FROM (SELECT MAX(id_trap_event_listener_action) + 1 AS next_val FROM trap_event_listener_action) AS tab_id_seq);
      INSERT INTO id_seq VALUES ('TRAP_EVENT_LISTENER_ID', 1) ON CONFLICT (name) DO UPDATE SET val = (SELECT CASE WHEN tab_id_seq.next_val IS NULL THEN 1 ELSE tab_id_seq.next_val END FROM (SELECT MAX(id_trap_event_listener) + 1 AS next_val FROM trap_event_listener) AS tab_id_seq);
      INSERT INTO id_seq VALUES ('TRAP_EVENT_LISTENER_PROPERTY_ID', 1) ON CONFLICT (name) DO UPDATE SET val = (SELECT CASE WHEN tab_id_seq.next_val IS NULL THEN 1 ELSE tab_id_seq.next_val END FROM (SELECT MAX(id_trap_event_listener_property) + 1 AS next_val FROM trap_event_listener_property) AS tab_id_seq);
      INSERT INTO id_seq VALUES ('USER_ID', 1) ON CONFLICT (name) DO UPDATE SET val = (SELECT CASE WHEN tab_id_seq.next_val IS NULL THEN 1 ELSE tab_id_seq.next_val END FROM (SELECT MAX(id_user) + 1 AS next_val FROM sys_user) AS tab_id_seq);
      INSERT INTO id_seq VALUES ('USER_LEVEL_ID', 1) ON CONFLICT (name) DO UPDATE SET val = (SELECT CASE WHEN tab_id_seq.next_val IS NULL THEN 1 ELSE tab_id_seq.next_val END FROM (SELECT MAX(id_user_level) + 1 AS next_val FROM user_level) AS tab_id_seq);
      INSERT INTO id_seq VALUES ('VARIABLE_TEST_DATA_ID', 1) ON CONFLICT (name) DO UPDATE SET val = (SELECT CASE WHEN tab_id_seq.next_val IS NULL THEN 1 ELSE tab_id_seq.next_val END FROM (SELECT MAX(id_variable_test_data) + 1 AS next_val FROM variable_test_data) AS tab_id_seq);
      INSERT INTO id_seq VALUES ('VARIABLE_TEST_ID', 1) ON CONFLICT (name) DO UPDATE SET val = (SELECT CASE WHEN tab_id_seq.next_val IS NULL THEN 1 ELSE tab_id_seq.next_val END FROM (SELECT MAX(id_variable_test) + 1 AS next_val FROM variable_test) AS tab_id_seq);

END;
$$ LANGUAGE plpgsql;
SELECT update_id_seq();
	